<div class="container mt-4">
    <!-- Indicador de carga -->
    <div id="loadingIndicator" style="display: none;" class="position-fixed top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-black bg-opacity-50 z-index-1000">
        <div class="spinner-border text-light" role="status" style="width: 3rem; height: 3rem;">
            <span class="visually-hidden">Cargando...</span>
        </div>
    </div>
    
    <div class="card">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <div class="d-flex align-items-center">
                <i class="bi bi-receipt me-2 fs-4"></i>
                <h4 class="mb-0">Facturas Electrónicas</h4>
            </div>
            <a href="/" class="btn btn-outline-light btn-sm">
                <i class="bi bi-arrow-left me-1"></i>
                Volver
            </a>
        </div>
        <div class="card-body">
            <!-- Filtros -->
            <div class="row mb-3">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0"><span class="badge bg-primary">Paso 1</span> Filtros</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <label class="form-label">Estado de factura</label>
                                <div class="btn-group d-flex" role="group">
                                    <input type="radio" class="btn-check" name="filtroEstadoFactura" id="estadoTodas" value="" checked>
                                    <label class="btn btn-outline-primary" for="estadoTodas">Todas las facturas</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroEstadoFactura" id="estadoRealizadas" value="realizadas">
                                    <label class="btn btn-outline-primary" for="estadoRealizadas">Facturas realizadas</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroEstadoFactura" id="estadoPendientes" value="pendientes">
                                    <label class="btn btn-outline-primary" for="estadoPendientes">Facturas pendientes</label>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Rango de fechas</label>
                                <div class="row">
                                    <div class="col-md-6">
                    <div class="input-group">
                                            <span class="input-group-text">Desde</span>
                                            <input type="date" id="fechaInicio" class="form-control">
                    </div>
                </div>
                                    <div class="col-md-6">
                    <div class="input-group">
                                            <span class="input-group-text">Hasta</span>
                                            <input type="date" id="fechaFin" class="form-control">
                                        </div>
                                    </div>
                    </div>
                </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Tipo de registro</label>
                                <div class="btn-group d-flex" role="group">
                                    <input type="radio" class="btn-check" name="filtroTipo" id="tipoTodos" value="" checked>
                                    <label class="btn btn-outline-primary" for="tipoTodos">Todos los tipos</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroTipo" id="tipoTiempo" value="tiempo">
                                    <label class="btn btn-outline-primary" for="tipoTiempo">Por tiempo</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroTipo" id="tipoMensualidad" value="mensualidad">
                                    <label class="btn btn-outline-primary" for="tipoMensualidad">Mensualidad</label>
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Solicitud de factura</label>
                                <div class="btn-group d-flex" role="group">
                                    <input type="radio" class="btn-check" name="filtroSolicitud" id="solicitudTodos" value="" checked>
                                    <label class="btn btn-outline-primary" for="solicitudTodos">Todos los registros</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroSolicitud" id="solicitudSi" value="1">
                                    <label class="btn btn-outline-primary" for="solicitudSi">Solicitaron factura</label>
                                    
                                    <input type="radio" class="btn-check" name="filtroSolicitud" id="solicitudNo" value="0">
                                    <label class="btn btn-outline-primary" for="solicitudNo">No solicitaron factura</label>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Acciones</h5>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <h5 class="mb-0"><span class="badge bg-primary">Paso 2</span> </h5>
                               
                                <button id="btnDescargarExcel" class="btn btn-info w-100 mb-3">
                                    <i class="bi bi-file-earmark-excel me-1"></i>
                                     Descargar archivo Excel<br>
                                    <small class="text-light">Cambia estado factura por creada en Excel y realiza el paso 3</small>
                                </button>
                                <div></div><h5 class="mb-0"><span class="badge bg-primary">Paso 3</span></h5>
                            
                                <div class="card">
                                    
                                    <div class="card-header bg-light">
                                        <h5 class="mb-0">Cargar resultado de facturación</h5>
                                    </div>
                                    <div class="card-body">
                                        <div class="mb-3">
                                            <label for="archivoResultado" class="form-label">Archivo Excel con resultados</label>
                                            <input class="form-control" type="file" id="archivoResultado" accept=".xlsx,.xls">
                                        </div>
                                        <button id="btnCargarResultado" class="btn btn-secondary w-100">
                                            <i class="bi bi-upload me-1"></i>
                                            Cargar resultados desde Excel
                    </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <!-- Tabla de facturas -->
            {{#if facturas.length}}
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead class="table-primary">
                            <tr>
                                <th>ID</th>
                                <th>Placa</th>
                                <th>Tipo Vehículo</th>
                                <th>Cliente</th>
                                <th>Documento</th>
                                <th>Email</th>
                                <th>Fecha</th>
                                <th>Valor Base</th>
                                <th>% Desc.</th>
                                <th>Descuento</th>
                                <th>IVA</th>
                                <th>Total</th>
                                <th>Tipo</th>
                                <th>Estado Factura</th>
                                <th>Fecha Creación</th>
                            </tr>
                        </thead>
                        <tbody id="tablaFacturas">
                            {{#each facturas}}
                                <tr>
                                    <td>{{id}}</td>
                                    <td>{{placa}}</td>
                                    <td>{{tipo_vehiculo}}</td>
                                    <td>{{#if solicita_factura_electronica}}{{nombre_completo}}{{else}}<span class="text-muted">-</span>{{/if}}</td>
                                    <td>{{#if solicita_factura_electronica}}{{documento_identidad}}{{else}}<span class="text-muted">-</span>{{/if}}</td>
                                    <td>{{#if solicita_factura_electronica}}{{correo_electronico}}{{else}}<span class="text-muted">-</span>{{/if}}</td>
                                    <td>{{formatDateTime fecha_movimiento}}</td>
                                    <td>{{formatMoney valor_base}}</td>
                                    <td>{{#if porcentaje_descuento}}{{porcentaje_descuento}}%{{else}}0%{{/if}}</td>
                                    <td>{{formatMoney descuento}}</td>
                                    <td>{{formatMoney valor_iva}}</td>
                                    <td>{{formatMoney valor_total}}</td>
                                    <td>
                                        {{#if es_movimiento}}
                                            <span class="badge bg-info">Por Tiempo</span>
                                        {{else}}
                                            <span class="badge bg-success">Mensualidad</span>
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{#if factura_creada}}
                                            <span class="badge bg-success">
                                                <i class="bi bi-check-circle me-1"></i>
                                                Factura creada
                                            </span>
                                        {{else}}
                                            {{#if solicita_factura_electronica}}
                                                <span class="badge bg-warning">
                                                    <i class="bi bi-exclamation-circle me-1"></i>
                                                    Pendiente
                                                </span>
                                            {{else}}
                                                <span class="badge bg-secondary">
                                                    <i class="bi bi-x-circle me-1"></i>
                                                    No solicitada
                                                </span>
                                            {{/if}}
                                        {{/if}}
                                    </td>
                                    <td>
                                        {{#if fecha_creacion_factura}}
                                            {{formatDateTime fecha_creacion_factura}}
                                        {{else}}
                                            <span class="text-muted">-</span>
                                        {{/if}}
                                    </td>
                                </tr>
                            {{/each}}
                        </tbody>
                    </table>
                </div>
            {{else}}
                <div class="alert alert-info">
                    <i class="bi bi-info-circle me-2"></i>
                    No se encontraron facturas con los criterios de búsqueda especificados.
                </div>
            {{/if}}
        </div>
    </div>
</div>

<!-- SheetJS para manejar archivos Excel -->
<script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>
<script>
    console.log('Verificando carga de XLSX:', typeof XLSX !== 'undefined' ? 'XLSX cargado correctamente' : 'XLSX no está disponible');
</script>

<!-- Script de filtros -->
<script src="/js/facturas-filter.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Inicializando página de facturas electrónicas');
        
        // Referencias a elementos
        const tablaFacturas = document.getElementById('tablaFacturas');
        const btnAplicarFiltros = document.getElementById('btnAplicarFiltros');
        const btnLimpiarFiltros = document.getElementById('btnLimpiarFiltros');
        const btnGenerarLote = document.getElementById('btnGenerarLote');
        const btnDescargarExcel = document.getElementById('btnDescargarExcel');
        const btnCargarResultado = document.getElementById('btnCargarResultado');
        
        // Inicializar botones de selección
        document.querySelectorAll('input[name="filtroEstadoFactura"], input[name="filtroTipo"], input[name="filtroSolicitud"]').forEach(radio => {
            radio.addEventListener('change', () => aplicarFiltros(false));
        });
        
        // Inicializar inputs de fecha
        document.getElementById('fechaInicio').addEventListener('change', () => aplicarFiltros(false));
        document.getElementById('fechaFin').addEventListener('change', () => aplicarFiltros(false));
        
        // Inicializar botones de acciones
        if (btnDescargarExcel) {
            btnDescargarExcel.addEventListener('click', descargarArchivoExcel);
        }
        
        if (btnCargarResultado) {
            btnCargarResultado.addEventListener('click', cargarResultados);
        }
        
        // Referencias a elementos adicionales
        const selectAll = document.getElementById('selectAll');
        const facturaChecks = document.querySelectorAll('.factura-check');
        
        // Eventos
        if (selectAll) {
            selectAll.addEventListener('change', function() {
                const facturaChecks = document.querySelectorAll('.factura-check:not([disabled])');
                facturaChecks.forEach(check => {
                    check.checked = selectAll.checked;
                });
                actualizarContador();
            });
        }
        
        // Agregar manejadores de eventos para los checkboxes individuales
        facturaChecks.forEach(check => {
            if (!check.disabled) {
                check.addEventListener('change', function() {
                    actualizarContador();
                });
            }
        });
        
        // Función para marcar factura como creada
        function marcarFacturaCreada(idUnico, checkbox) {
            // Mostrar indicador de carga
            const fila = checkbox.closest('tr');
            const celdaEstado = fila.querySelector('td:nth-child(15)');
            const celdaFecha = fila.querySelector('td:nth-child(16)');
            
            celdaEstado.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Cargando...</span></div>';
            
            fetch('/facturasElectronicas/marcar-creada', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ id: idUnico })
            })
            .then(response => response.json())
            .then(data => {
                if (data.error) {
                    alert('Error: ' + data.mensaje);
                    checkbox.checked = false;
                    celdaEstado.innerHTML = `
                        <span class="badge bg-warning">
                            <i class="bi bi-exclamation-circle me-1"></i>
                            Pendiente
                        </span>
                    `;
                } else {
                    // Actualizar interfaz
                    checkbox.checked = true;
                    checkbox.disabled = true;
                    
                    celdaEstado.innerHTML = `
                        <span class="badge bg-success">
                            <i class="bi bi-check-circle me-1"></i>
                            Factura creada
                        </span>
                    `;
                    
                    celdaFecha.textContent = new Date(data.fecha_creacion).toLocaleString();
                    
                    // Mostrar mensaje de éxito
                    mostrarAlerta('success', `¡Éxito! ${data.mensaje}`);
                    
                    // Actualizar contador
                    actualizarContador();
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error al comunicarse con el servidor');
                checkbox.checked = false;
                celdaEstado.innerHTML = `
                    <span class="badge bg-warning">
                        <i class="bi bi-exclamation-circle me-1"></i>
                        Pendiente
                    </span>
                `;
            });
        }
        
        // Función para procesar facturas en lote
        function procesarLoteFacturas(idsFacturas) {
            // Deshabilitar botón para evitar múltiples clics
            btnGenerarLote.disabled = true;
            btnGenerarLote.innerHTML = '<i class="bi bi-hourglass-split me-1"></i> Procesando...';
            
            // Crear una alerta de procesamiento
            mostrarAlerta('info', `Procesando ${idsFacturas.length} facturas...`);
            
            // Procesar cada factura secuencialmente
            let procesadas = 0;
            let exitosas = 0;
            let fallidas = 0;
            
            function procesarSiguiente(index) {
                if (index >= idsFacturas.length) {
                    // Hemos terminado de procesar todas las facturas
                    btnGenerarLote.disabled = false;
                    btnGenerarLote.innerHTML = '<i class="bi bi-receipt-cutoff me-1"></i> Generar facturas seleccionadas (<span id="contadorSeleccionadas">0</span>)';
                    document.getElementById('contadorSeleccionadas').textContent = '0';
                    
                    mostrarAlerta('success', `Proceso completado: ${exitosas} facturas generadas, ${fallidas} fallidas.`);
                    return;
                }
                
                const idUnico = idsFacturas[index];
                const checkbox = document.querySelector(`.factura-check[data-id="${idUnico}"]`);
                
                if (checkbox && !checkbox.disabled) {
                    const fila = checkbox.closest('tr');
                    const celdaEstado = fila.querySelector('td:nth-child(15)');
                    celdaEstado.innerHTML = '<div class="spinner-border spinner-border-sm text-primary" role="status"><span class="visually-hidden">Cargando...</span></div>';
                    
                    fetch('/facturasElectronicas/marcar-creada', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ id: idUnico })
                    })
                    .then(response => response.json())
                    .then(data => {
                        procesadas++;
                        
                        if (data.error) {
                            fallidas++;
                            celdaEstado.innerHTML = `
                                <span class="badge bg-warning">
                                    <i class="bi bi-exclamation-circle me-1"></i>
                                    Pendiente
                                </span>
                            `;
                        } else {
                            exitosas++;
                            const celdaFecha = fila.querySelector('td:nth-child(16)');
                            
                            checkbox.checked = true;
                            checkbox.disabled = true;
                            
                            celdaEstado.innerHTML = `
                                <span class="badge bg-success">
                                    <i class="bi bi-check-circle me-1"></i>
                                    Factura creada
                                </span>
                            `;
                            
                            celdaFecha.textContent = new Date(data.fecha_creacion).toLocaleString();
                        }
                        
                        // Actualiza el progreso
                        btnGenerarLote.innerHTML = `<i class="bi bi-hourglass-split me-1"></i> Procesando (${procesadas}/${idsFacturas.length})`;
                        
                        // Procesar la siguiente factura
                        setTimeout(() => procesarSiguiente(index + 1), 300);
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        procesadas++;
                        fallidas++;
                        
                        celdaEstado.innerHTML = `
                            <span class="badge bg-warning">
                                <i class="bi bi-exclamation-circle me-1"></i>
                                Pendiente
                            </span>
                        `;
                        
                        // Procesar la siguiente factura a pesar del error
                        setTimeout(() => procesarSiguiente(index + 1), 300);
                    });
                } else {
                    // Si el checkbox no existe o está deshabilitado, pasar a la siguiente
                    procesarSiguiente(index + 1);
                }
            }
            
            // Iniciar el procesamiento secuencial
            procesarSiguiente(0);
        }
        
        // Función para descargar archivo Excel
        function descargarArchivoExcel() {
            try {
                // Aplicar filtros primero
                aplicarFiltros(false);
                
                // Obtener todas las filas visibles
                const filasVisibles = Array.from(tablaFacturas.querySelectorAll('tr')).filter(
                    fila => fila.style.display !== 'none'
                );
                
                if (filasVisibles.length === 0) {
                    mostrarAlerta('warning', 'No hay datos para exportar');
                    return;
                }
                
                // Crear datos para Excel
                const datos = [];
                
                // Encabezados
                datos.push([
                    'ID', 'PLACA', 'TIPO_VEHICULO', 'CLIENTE', 'DOCUMENTO', 'EMAIL', 
                    'FECHA', 'VALOR_BASE', 'DESCUENTO', 'IVA', 'TOTAL', 'TIPO', 'ESTADO_FACTURA'
                ]);
                
                // Datos de las filas
                filasVisibles.forEach(fila => {
                    const celdas = fila.querySelectorAll('td');
                    if (celdas.length > 0) {
                        const id = celdas[1].textContent.trim();
                        const placa = celdas[2].textContent.trim();
                        const tipoVehiculo = celdas[3].textContent.trim();
                        const cliente = celdas[4].textContent.replace('-', '').trim();
                        const documento = celdas[5].textContent.replace('-', '').trim();
                        const email = celdas[6].textContent.replace('-', '').trim();
                        const fecha = celdas[7].textContent.trim();
                        const valorBase = celdas[8].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const descuento = celdas[10].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const iva = celdas[11].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const total = celdas[12].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const tipo = celdas[13].querySelector('span') ? celdas[13].querySelector('span').textContent.trim() : '';
                        
                        const estadoFactura = celdas[14].querySelector('span') ? 
                            celdas[14].querySelector('span').textContent.includes('creada') 
                                ? 'CREADA' 
                                : celdas[14].querySelector('span').textContent.includes('Pendiente')
                                    ? 'PENDIENTE'
                                    : 'NO_SOLICITADA'
                            : '';
                        
                        datos.push([
                            id, placa, tipoVehiculo, cliente, documento, email,
                            fecha, valorBase, descuento, iva, total, tipo, estadoFactura
                        ]);
                    }
                });
                
                console.log('Datos para Excel:', datos); // Para depuración
                
                // Verificar que la librería está cargada
                if (typeof XLSX === 'undefined') {
                    throw new Error('La librería XLSX no está cargada correctamente');
                }
                
                // Crear libro de Excel
                const libro = XLSX.utils.book_new();
                const hoja = XLSX.utils.aoa_to_sheet(datos);
                
                // Añadir hoja al libro
                XLSX.utils.book_append_sheet(libro, hoja, 'Facturas');
                
                // Formatear fecha para el nombre del archivo
                const fechaArchivo = new Date().toISOString().split('T')[0];
                const nombreArchivo = `facturas_electronicas_${fechaArchivo}.xlsx`;
                
                console.log('Intentando descargar:', nombreArchivo); // Para depuración
                
                // Descargar el archivo
                XLSX.writeFile(libro, nombreArchivo);
                
                mostrarAlerta('success', `Archivo Excel generado con ${filasVisibles.length} registros`);
            } catch (error) {
                console.error('Error al generar archivo Excel:', error);
                mostrarAlerta('danger', `Error al generar archivo Excel: ${error.message}`);
                
                // Alternativa: usar un enfoque diferente si falla el principal
                if (confirm('Hubo un problema al generar el archivo Excel. ¿Desea intentar un método alternativo?')) {
                    descargarCSV();
                }
            }
        }
        
        // Método alternativo: descargar como CSV
        function descargarCSV() {
            try {
                // Aplicar filtros primero
                aplicarFiltros(false);
                
                // Obtener todas las filas visibles
                const filasVisibles = Array.from(tablaFacturas.querySelectorAll('tr')).filter(
                    fila => fila.style.display !== 'none'
                );
                
                if (filasVisibles.length === 0) {
                    mostrarAlerta('warning', 'No hay datos para exportar');
                    return;
                }
                
                // Crear contenido CSV
                let contenidoCSV = 'ID,PLACA,TIPO_VEHICULO,CLIENTE,DOCUMENTO,EMAIL,FECHA,VALOR_BASE,DESCUENTO,IVA,TOTAL,TIPO,ESTADO_FACTURA\n';
                
                // Datos de las filas
                filasVisibles.forEach(fila => {
                    const celdas = fila.querySelectorAll('td');
                    if (celdas.length > 0) {
                        const id = celdas[1].textContent.trim();
                        const placa = celdas[2].textContent.trim();
                        const tipoVehiculo = celdas[3].textContent.trim();
                        const cliente = celdas[4].textContent.replace('-', '').trim();
                        const documento = celdas[5].textContent.replace('-', '').trim();
                        const email = celdas[6].textContent.replace('-', '').trim();
                        const fecha = celdas[7].textContent.trim();
                        const valorBase = celdas[8].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const descuento = celdas[10].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const iva = celdas[11].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const total = celdas[12].textContent.replace(/[^\d,]/g, '').replace(',', '.');
                        const tipo = celdas[13].querySelector('span') ? celdas[13].querySelector('span').textContent.trim() : '';
                        
                        const estadoFactura = celdas[14].querySelector('span') ? 
                            celdas[14].querySelector('span').textContent.includes('creada') 
                                ? 'CREADA' 
                                : celdas[14].querySelector('span').textContent.includes('Pendiente')
                                    ? 'PENDIENTE'
                                    : 'NO_SOLICITADA'
                            : '';
                        
                        contenidoCSV += `${id},${placa},${tipoVehiculo},${cliente},${documento},${email},${fecha},${valorBase},${descuento},${iva},${total},${tipo},${estadoFactura}\n`;
                    }
                });
                
                // Crear y descargar el archivo
                const blob = new Blob([contenidoCSV], { type: 'text/csv;charset=utf-8;' });
                const url = window.URL.createObjectURL(blob);
                const a = document.createElement('a');
                
                // Formatear fecha para el nombre del archivo
                const fechaArchivo = new Date().toISOString().split('T')[0];
                
                a.href = url;
                a.download = `facturas_electronicas_${fechaArchivo}.csv`;
                document.body.appendChild(a);
                a.click();
                window.URL.revokeObjectURL(url);
                document.body.removeChild(a);
                
                mostrarAlerta('success', `Archivo CSV generado con ${filasVisibles.length} registros`);
            } catch (error) {
                console.error('Error al generar archivo CSV:', error);
                mostrarAlerta('danger', `Error al generar archivo CSV: ${error.message}`);
            }
        }
        
        // Función para cargar resultados desde archivo Excel
        function cargarResultados() {
            try {
                // Verificar si hay un archivo seleccionado
                const archivoInput = document.getElementById('archivoResultado');
                
                if (!archivoInput.files || archivoInput.files.length === 0) {
                    mostrarAlerta('warning', 'Por favor seleccione un archivo Excel');
                    return;
                }
                
                const archivo = archivoInput.files[0];
                mostrarAlerta('info', `Procesando archivo: ${archivo.name}`);
                
                // Verificar que sea un archivo Excel
                if (!archivo.name.match(/\.(xlsx|xls)$/i)) {
                    mostrarAlerta('warning', 'Por favor seleccione un archivo Excel válido (.xlsx o .xls)');
                    return;
                }
                
                // Verificar que la librería está cargada
                if (typeof XLSX === 'undefined') {
                    mostrarAlerta('danger', 'Error: La librería XLSX no está cargada correctamente');
                    return;
                }
                
                // Mostrar indicador de carga
                document.getElementById('loadingIndicator').style.display = 'flex';
                console.log('Iniciando procesamiento del archivo Excel');
                
                // Leer el archivo como ArrayBuffer
                const reader = new FileReader();
                
                reader.onload = function(e) {
                    try {
                        console.log('Archivo cargado correctamente, procesando datos...');
                        const data = new Uint8Array(e.target.result);
                        const workbook = XLSX.read(data, {type: 'array'});
                        
                        // Obtener la primera hoja
                        const firstSheet = workbook.SheetNames[0];
                        const worksheet = workbook.Sheets[firstSheet];
                        
                        // Convertir a JSON - probamos ambos métodos
                        let jsonData = XLSX.utils.sheet_to_json(worksheet);
                        console.log('Datos leídos con encabezados:', jsonData);
                        
                        // Si no hay datos, probamos el segundo método
                        if (!jsonData || jsonData.length === 0) {
                            jsonData = XLSX.utils.sheet_to_json(worksheet, {header: 1});
                            console.log('Datos leídos sin encabezados:', jsonData);
                        }
                        
                        // Verificar que haya datos
                        if (!jsonData || jsonData.length === 0) {
                            mostrarAlerta('warning', 'El archivo no contiene datos');
                            document.getElementById('loadingIndicator').style.display = 'none';
                            return;
                        }
                        
                        // Buscar los IDs en la tabla actual para hacer la correspondencia
                        const registrosTabla = Array.from(document.querySelectorAll('#tablaFacturas tr')).map(row => {
                            const idCell = row.querySelector('td:nth-child(2)'); // Columna ID
                            const placaCell = row.querySelector('td:nth-child(3)'); // Columna Placa
                            const estadoCell = row.querySelector('td:nth-child(15)'); // Columna Estado
                            
                            if (idCell && placaCell && estadoCell) {
                                const estadoPendiente = estadoCell.textContent.includes('Pendiente');
                                const estadoNoSolicitado = estadoCell.textContent.includes('No solicitada');
                                const estadoCreada = estadoCell.textContent.includes('Factura creada');
                                
                                return {
                                    id: idCell.textContent.trim(),
                                    placa: placaCell.textContent.trim(),
                                    pendiente: estadoPendiente,
                                    noSolicitado: estadoNoSolicitado,
                                    creada: estadoCreada,
                                    element: row
                                };
                            }
                            return null;
                        }).filter(r => r !== null);
                        
                        console.log('Registros en tabla:', registrosTabla);
                        
                        // Extraer registros del archivo Excel
                        let registrosExcel = [];
                        let campoID = '', campoPlaca = '', campoEstado = '';
                        
                        // Detectar formato del archivo
                        if (typeof jsonData[0] === 'object' && !Array.isArray(jsonData[0])) {
                            // Buscar los nombres de columnas más probables
                            const primeraFila = jsonData[0];
                            const columnas = Object.keys(primeraFila);
                            
                            console.log('Columnas disponibles:', columnas);
                            
                            // Buscar columnas por nombre similar
                            for (const col of columnas) {
                                const colUpper = col.toUpperCase();
                                if (colUpper === 'ID' || colUpper.includes('ID') || colUpper.includes('IDUNICO')) {
                                    campoID = col;
                                } else if (colUpper === 'PLACA' || colUpper.includes('VEHICULO') || colUpper.includes('PLATE')) {
                                    campoPlaca = col;
                                } else if (colUpper.includes('ESTADO') || colUpper.includes('STATUS')) {
                                    campoEstado = col;
                                }
                            }
                            
                            console.log(`Columnas identificadas - ID: ${campoID}, Placa: ${campoPlaca}, Estado: ${campoEstado}`);
                            
                            // Procesar registros del Excel
                            registrosExcel = jsonData.map(fila => ({
                                id_excel: campoID ? fila[campoID] : '',
                                placa_excel: campoPlaca ? fila[campoPlaca] : '',
                                estado: campoEstado ? String(fila[campoEstado]).toUpperCase().trim() : 'CREADA'
                            }));
                        } else if (Array.isArray(jsonData[0])) {
                            // Intentar identificar columnas por la primera fila
                            const primeraFila = jsonData[0].map(col => String(col).toUpperCase().trim());
                            let idIndex = -1, placaIndex = -1, estadoIndex = -1;
                            
                            primeraFila.forEach((col, index) => {
                                if (col === 'ID' || col.includes('ID')) {
                                    idIndex = index;
                                } else if (col === 'PLACA' || col.includes('VEHICULO')) {
                                    placaIndex = index;
                                } else if (col.includes('ESTADO')) {
                                    estadoIndex = index;
                                }
                            });
                            
                            // Si no encontramos encabezados, asumimos posiciones
                            if (idIndex === -1) idIndex = 0;  // Primera columna
                            if (estadoIndex === -1) estadoIndex = idIndex + 1;  // Segunda columna
                            
                            console.log(`Índices - ID: ${idIndex}, Placa: ${placaIndex}, Estado: ${estadoIndex}`);
                            
                            // Procesar filas (saltando la primera si son encabezados)
                            const startIndex = (primeraFila.includes('ID') || primeraFila.includes('PLACA')) ? 1 : 0;
                            
                            for (let i = startIndex; i < jsonData.length; i++) {
                                const fila = jsonData[i];
                                if (Array.isArray(fila) && fila.length > 0) {
                                    registrosExcel.push({
                                        id_excel: idIndex >= 0 && idIndex < fila.length ? String(fila[idIndex]) : '',
                                        placa_excel: placaIndex >= 0 && placaIndex < fila.length ? String(fila[placaIndex]) : '',
                                        estado: estadoIndex >= 0 && estadoIndex < fila.length ? 
                                                String(fila[estadoIndex]).toUpperCase().trim() : 'CREADA'
                                    });
                                }
                            }
                        }
                        
                        console.log('Registros del Excel:', registrosExcel);
                        
                        // Hacer correspondencia entre registros Excel y registros de la tabla
                        const registrosActualizar = [];
                        const registrosNoEncontrados = [];
                        
                        registrosExcel.forEach(regExcel => {
                            // Buscar coincidencia por ID o por placa
                            let registroTabla = null;
                            
                            if (regExcel.id_excel) {
                                registroTabla = registrosTabla.find(r => 
                                    r.id === regExcel.id_excel || 
                                    r.id.includes(regExcel.id_excel) || 
                                    regExcel.id_excel.includes(r.id)
                                );
                            }
                            
                            // Si no encontramos por ID, buscamos por placa
                            if (!registroTabla && regExcel.placa_excel) {
                                registroTabla = registrosTabla.find(r => 
                                    r.placa.toUpperCase() === regExcel.placa_excel.toUpperCase()
                                );
                            }
                            
                            // Actualizamos tanto los pendientes como los no solicitados
                            // si el Excel indica que están CREADA
                            if (registroTabla && 
                                (registroTabla.pendiente || registroTabla.noSolicitado) && 
                                (regExcel.estado === 'CREADA' || regExcel.estado === '1')) {
                                registrosActualizar.push({
                                    id: registroTabla.id,
                                    estado_factura: 'CREADA',
                                    fecha_creacion: new Date().toISOString()
                                });
                            } else {
                                registrosNoEncontrados.push(regExcel);
                            }
                        });
                        
                        console.log('Registros a actualizar:', registrosActualizar);
                        console.log('Registros no encontrados:', registrosNoEncontrados);
                        
                        if (registrosActualizar.length === 0) {
                            document.getElementById('loadingIndicator').style.display = 'none';
                            
                            if (registrosNoEncontrados.length > 0) {
                                // Mostrar los registros que no se pudieron encontrar
                                const idsMostrar = registrosNoEncontrados
                                    .map(r => r.id_excel || r.placa_excel)
                                    .filter(id => id)
                                    .join(', ');
                                    
                                mostrarAlerta('warning', `No se encontraron facturas pendientes o no solicitadas que coincidan con los registros del archivo: ${idsMostrar}`);
                            } else {
                                mostrarAlerta('warning', 'No se encontraron facturas pendientes o no solicitadas para actualizar');
                            }
                            return;
                        }
                        
                        // Confirmar antes de enviar
                        if (confirm(`Se actualizarán ${registrosActualizar.length} registros (pendientes o no solicitados) a estado CREADA. ¿Desea continuar?`)) {
                            // Enviar datos al servidor
                            fetch('/facturasElectronicas/actualizar-resultados', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ resultados: registrosActualizar })
                            })
                            .then(response => {
                                console.log('Respuesta del servidor:', response);
                                if (!response.ok) {
                                    throw new Error('Error en la respuesta del servidor: ' + response.status);
                                }
                                return response.json();
                            })
                            .then(data => {
                                document.getElementById('loadingIndicator').style.display = 'none';
                                console.log('Datos recibidos del servidor:', data);
                                
                                if (data.actualizados > 0 || data.success) {
                                    mostrarAlerta('success', data.mensaje || `